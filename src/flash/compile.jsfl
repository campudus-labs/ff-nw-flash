/**	* DOESNT RECOMPILE EVERYTHING IF LIBS ARE CHANGED - DELETE last_build.txt IN THIS CASE BEFORE RUNNING	*/var importFolder = fl.scriptURI;importFolder = importFolder.substr(0, importFolder.lastIndexOf("/"));var lastBuildFile = importFolder + '/../../out/last_build.txt';var lastBuild = FLfile.getModificationDate(lastBuildFile);var compiledFiles = {};var compilingTmpFile = importFolder + '/compile.jsfl.deleteme';var compiling = FLfile.exists(compilingTmpFile);clearLastBuild(lastBuildFile);compileFolder(importFolder);writeLastBuild(lastBuildFile);if (compiling) {  FLfile.remove(compilingTmpFile);}log('Done. Compiled all .fla files');function compileFolder(folder) {  var attr, fileOrFolder, flashFile, i;  var importFolderContents = FLfile.listFolder(folder);  for (i = 0; i < importFolderContents.length; i++) {    fileOrFolder = folder + '/' + importFolderContents[i];    attr = FLfile.getAttributes(fileOrFolder);    if (attr && attr.indexOf('D') != -1) {      compileFolder(fileOrFolder);    } else if (isFlashFile(fileOrFolder) || isActionScriptFile(fileOrFolder)) {      if (isModifiedAfterLastBuild(fileOrFolder)) {        if (isFlashFile(fileOrFolder)) {          log('-> BUILD: ' + fileOrFolder);          compile(fileOrFolder);        } else {          log('-> FOUND MODIFIED .as FILE: ' + fileOrFolder);          flashFile = findFlashFile(folder, fileOrFolder);          if (flashFile) {            log('-> BUILD: ' + flashFile);            compile(flashFile);          }        }      } else {        log('not modified after last build: ' + fileOrFolder);      }    }  }}function findFlashFile(folder, file) {  var urlWithoutExtension = file.substr(0, file.length - 3);  var folderName = folder.substr(folder.lastIndexOf('/') + 1);  var tryFile1 = urlWithoutExtension + '.fla';  var tryFile2 = urlWithoutExtension.substr(0, urlWithoutExtension.lastIndexOf('_code')) + '.fla';  var tryFile3 = folder.substr(0, folder.lastIndexOf('/') + 1) + folderName + '.fla';  if (FLfile.exists(tryFile1)) {    return tryFile1;  } else if (FLfile.exists(tryFile2)) {    return tryFile2;  } else if (FLfile.exists(tryFile3)) {    return tryFile3;  }  log('NO .fla FILE FOR ' + file + ' FOUND!');}function isFlashFile(file) {  return file.substr(-4) == '.fla';}function isActionScriptFile(file) {  return file.substr(-3) == '.as';}function compile(file) {  if (!compiledFiles[file]) {    var currentFolder = file.substring(0, file.lastIndexOf('/'));    var doc = fl.openDocument(file);    var xmlString = doc.exportPublishProfileString();    var flashFileName = xmlString.split('flashFileName')[1];    flashFileName = flashFileName.substring(1, flashFileName.length - 2);    var flashFolderName = flashFileName.substring(0, flashFileName.lastIndexOf('/'));    if (!FLfile.exists(currentFolder + '/' + flashFolderName)) {      FLfile.createFolder(currentFolder + '/' + flashFolderName);    }    doc.publish();    fl.closeDocument(doc);    compiledFiles[file] = true;  } else {    log('Already compiled ' + file);  }}function isModifiedAfterLastBuild(file) {  var modificationDate = FLfile.getModificationDate(file);  return modificationDate > lastBuild;}function clearLastBuild(file) {  var outFolder = file.substr(0, file.lastIndexOf('/'));	if (!FLfile.exists(outFolder)) {    FLfile.createFolder(outFolder);  }  fl.trace(outFolder);	fl.trace(file);  FLfile.write(lastBuildFile, '');}function writeLastBuild(file) {  FLfile.write(lastBuildFile, 'see modification date.\n', 'a');}function log(str) {  fl.trace(str);  FLfile.write(lastBuildFile, str + '\n', 'a');}